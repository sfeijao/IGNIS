const { Events, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, MessageFlags, EmbedBuilder, StringSelectMenuBuilder } = require('discord.js');
const logger = require('../utils/logger');
const rateLimit = require('../utils/rateLimit');

// Handler para bot√£o de System Status
async function handleSystemStatus(interaction) {
    const visualAssets = require('../assets/visual-assets');

    const statusEmbed = new EmbedBuilder()
        .setColor('#00D26A')
        .setTitle('üìä **STATUS DO SISTEMA**')
        .setThumbnail(visualAssets.realImages.supportIcon)
        .setDescription([
            '### üîã **SERVI√áOS OPERACIONAIS**',
            '',
            'üü¢ **Bot Principal:** `ONLINE`',
            'üü¢ **Sistema de Tickets:** `OPERACIONAL`',
            'üü¢ **Base de Dados:** `CONECTADA`',
            'üü¢ **Webhooks:** `FUNCIONAIS`',
            'üü¢ **Auto-detec√ß√£o Staff:** `ATIVA`',
            '',
            '### üìà **ESTAT√çSTICAS EM TEMPO REAL**',
            '',
            `üìç **Servidor:** ${interaction.guild.name}`,
            `üë• **Membros Online:** ${interaction.guild.members.cache.filter(m => !m.user.bot && m.presence?.status !== 'offline').size}`,
            `üé´ **Tickets Ativos:** Em funcionamento`,
            `‚ö° **Lat√™ncia:** ${interaction.client.ws.ping}ms`,
            '',
            '### ‚è±Ô∏è **TEMPO DE RESPOSTA**',
            '',
            'üéØ **Meta SLA:** < 15 minutos',
            'üìä **Uptime:** 99.9%',
            'üîÑ **√öltima Atualiza√ß√£o:** Agora',
            '',
            '> üí° **Sistema monitorizado 24/7**'
        ].join('\n'))
        .addFields(
            {
                name: 'üè¢ Infraestrutura',
                value: '`Railway Platform`',
                inline: true
            },
            {
                name: '‚ö° Performance',
                value: '`Excelente`',
                inline: true
            },
            {
                name: 'üîí Seguran√ßa',
                value: '`Ativa`',
                inline: true
            }
        )
        .setFooter({ 
            text: 'Sistema de Tickets v2.0 ‚Ä¢ Status verificado',
            iconURL: interaction.client.user.displayAvatarURL()
        })
        .setTimestamp();

    await interaction.editReply({
        embeds: [statusEmbed]
    });
}

// Handler para bot√£o de Support Info
async function handleSupportInfo(interaction) {
    const visualAssets = require('../assets/visual-assets');

    const infoEmbed = new EmbedBuilder()
        .setColor('#5865F2')
        .setTitle('üíº **INFORMA√á√ïES DE SUPORTE**')
        .setThumbnail(visualAssets.realImages.supportIcon)
        .setImage(visualAssets.realImages.supportBanner)
        .setDescription([
            '### üìã **COMO USAR O SISTEMA**',
            '',
            '**1Ô∏è‚É£ CRIAR TICKET**',
            '‚îî Clique no bot√£o do departamento apropriado',
            '‚îî Um canal privado ser√° criado automaticamente',
            '',
            '**2Ô∏è‚É£ AGUARDAR RESPOSTA**',
            '‚îî Nossa equipe ser√° notificada instantaneamente',
            '‚îî Tempo m√©dio de resposta: **15 minutos**',
            '',
            '**3Ô∏è‚É£ COMUNICA√á√ÉO**',
            '‚îî Forne√ßa o m√°ximo de detalhes poss√≠vel',
            '‚îî Anexe capturas de ecr√£ se necess√°rio',
            '',
            '### üéØ **DEPARTAMENTOS DISPON√çVEIS**',
            '',
            'üîß **Suporte T√©cnico**',
            '‚Ä¢ Problemas com configura√ß√µes',
            '‚Ä¢ Bugs e falhas t√©cnicas',
            '‚Ä¢ Assist√™ncia com funcionalidades',
            '',
            '‚ö†Ô∏è **Reportar Problemas**',
            '‚Ä¢ Incidentes cr√≠ticos',
            '‚Ä¢ Falhas graves do sistema',
            '‚Ä¢ Emerg√™ncias t√©cnicas',
            '',
            'üõ°Ô∏è **Modera√ß√£o e Seguran√ßa**',
            '‚Ä¢ Den√∫ncias de utilizadores',
            '‚Ä¢ Viola√ß√µes de regras',
            '‚Ä¢ Quest√µes disciplinares',
            '',
            '### ‚ö° **RECURSOS AVAN√áADOS**',
            '',
            '‚Ä¢ **ü§ñ Detec√ß√£o Autom√°tica** de staff',
            '‚Ä¢ **üîí Canais Privados** seguros',
            '‚Ä¢ **üìä Transcri√ß√µes** completas',
            '‚Ä¢ **‚ö° Notifica√ß√µes** instant√¢neas',
            '‚Ä¢ **üìà Estat√≠sticas** detalhadas'
        ].join('\n'))
        .addFields(
            {
                name: '‚è∞ Hor√°rio de Funcionamento',
                value: '`24 horas por dia, 7 dias por semana`',
                inline: true
            },
            {
                name: 'üìû Canais de Contacto',
                value: '`Sistema de Tickets apenas`',
                inline: true
            },
            {
                name: 'üåê Idiomas Suportados',
                value: '`Portugu√™s ‚Ä¢ Ingl√™s`',
                inline: true
            }
        )
        .setFooter({ 
            text: 'Precisa de ajuda? Crie um ticket usando os bot√µes acima',
            iconURL: interaction.guild.iconURL({ dynamic: true })
        })
        .setTimestamp();

    await interaction.editReply({
        embeds: [infoEmbed]
    });
}

module.exports = {
    name: Events.InteractionCreate,
    once: false,
    async execute(interaction) {
        // Ignorar intera√ß√µes que n√£o s√£o relacionadas a tickets
        if (!interaction.customId?.startsWith('ticket_')) return;

        // Verificar se a intera√ß√£o j√° foi respondida (timeout protection)
        if (interaction.replied || interaction.deferred) {
            logger.warn(`Tentativa de processar intera√ß√£o j√° respondida: ${interaction.customId}`);
            return;
        }

        try {
            // Handle modal submissions for tickets
            if (interaction.isModalSubmit()) {
                if (interaction.customId === 'ticket_add_user_modal') {
                    await handleAddUserModal(interaction);
                    return;
                } else if (interaction.customId === 'ticket_remove_user_modal') {
                    await handleRemoveUserModal(interaction);
                    return;
                }
            }

            // Handle select menu interactions for tickets
            if (interaction.isStringSelectMenu()) {
                if (interaction.customId === 'ticket_priority_select') {
                    await interaction.deferReply({ flags: MessageFlags.Ephemeral });
                    await handlePrioritySelection(interaction);
                    return;
                }
            }

            // Handle button interactions for tickets
            if (interaction.isButton()) {
                const parts = interaction.customId.split('_');
                const [prefix, action, type] = parts;

                if (action === 'create') {
                    // CRIA√á√ÉO DIRETA DE TICKET - sem modal
                    await interaction.deferReply({ flags: MessageFlags.Ephemeral });
                    
                    // Verificar rate limit
                    const rateLimitKey = `ticket:${interaction.user.id}`;
                    const { allowed, resetTime } = rateLimit.check(rateLimitKey, 3, 3600000);

                    if (!allowed) {
                        const resetIn = Math.ceil((resetTime - Date.now()) / 60000);
                        return await interaction.editReply({
                            content: `‚ùå Voc√™ atingiu o limite de tickets. Tente novamente em ${resetIn} minutos.`
                        });
                    }

                    // Check for existing tickets
                    const existingTickets = await interaction.client.storage.getUserActiveTickets(
                        interaction.user.id,
                        interaction.guildId
                    );

                    if (existingTickets.length > 0) {
                        return await interaction.editReply({
                            content: `‚ùå Voc√™ j√° tem um ticket aberto: <#${existingTickets[0].channel_id}>`
                        });
                    }
                    
                    const ticketManager = interaction.client.ticketManager;
                    
                    // Usar descri√ß√£o padr√£o baseada no tipo
                    const defaultDescription = `Ticket criado para categoria: ${type}`;
                    
                    // Criar ticket diretamente
                    await ticketManager.handleTicketCreate(interaction, type, defaultDescription);
                } 
                else if (action === 'status') {
                    // Bot√£o de Status do Sistema
                    await interaction.deferReply({ flags: MessageFlags.Ephemeral });
                    await handleSystemStatus(interaction);
                }
                else {
                    try {
                        const ticketManager = interaction.client.ticketManager;
                        
                        // A√ß√µes que precisam de modal (n√£o fazer defer)
                        if ((action === 'add' && type === 'user') || (action === 'remove' && type === 'user')) {
                            switch (action) {
                                case 'add':
                                    if (type === 'user') await handleAddUser(interaction);
                                    break;
                                case 'remove':
                                    if (type === 'user') await handleRemoveUser(interaction);
                                    break;
                            }
                        } else {
                            // Defer the reply first para outras a√ß√µes
                            await interaction.deferReply({ flags: MessageFlags.Ephemeral });

                            switch (action) {
                                case 'close':
                                    await ticketManager.handleTicketClose(interaction);
                                    break;
                                case 'claim':
                                    await ticketManager.handleTicketClaim(interaction);
                                    break;
                                case 'priority':
                                    await handleTicketPriority(interaction);
                                    break;
                                case 'transcript':
                                    await handleTicketTranscript(interaction);
                                    break;
                                case 'rename':
                                    await handleTicketRename(interaction);
                                    break;
                                default:
                                    await interaction.editReply({
                                        content: '‚ùå A√ß√£o de ticket inv√°lida.',
                                        flags: MessageFlags.Ephemeral
                                    });
                            }
                        }
                    } catch (actionError) {
                        logger.error('Erro ao processar a√ß√£o do ticket:', actionError);
                        if (!interaction.replied && !interaction.deferred) {
                            await interaction.reply({
                                content: '‚ùå Erro ao processar a√ß√£o. Por favor, tente novamente.',
                                flags: MessageFlags.Ephemeral
                            }).catch(() => {});
                        } else if (interaction.deferred) {
                            await interaction.editReply({
                                content: '‚ùå Erro ao processar a√ß√£o. Por favor, tente novamente.',
                                flags: MessageFlags.Ephemeral
                            }).catch(() => {});
                        }
                    }
                }
            }
            // Modal submission handler removed - tickets are now created directly without modals
        } catch (error) {
            logger.error('Erro ao processar intera√ß√£o de ticket:', error);
            
            // Handle error response
            const response = {
                content: '‚ùå Ocorreu um erro ao processar sua solicita√ß√£o. Por favor, tente novamente.',
                ephemeral: true
            };

            // Try to send the error response
            try {
                if (interaction.replied) {
                    await interaction.followUp(response);
                } else if (interaction.deferred) {
                    await interaction.editReply(response);
                } else {
                    await interaction.reply(response);
                }
            } catch (followUpError) {
                logger.error('Erro ao enviar resposta de erro:', followUpError);
            }
        }
    }
};

// Handler para alterar prioridade do ticket
async function handleTicketPriority(interaction) {
    const priorities = [
        { label: 'üî¥ Alta Prioridade', value: 'high', emoji: 'üî¥' },
        { label: 'üü° Prioridade Normal', value: 'normal', emoji: 'üü°' },
        { label: 'üü¢ Baixa Prioridade', value: 'low', emoji: 'üü¢' }
    ];

    const selectMenu = new ActionRowBuilder().addComponents(
        new StringSelectMenuBuilder()
            .setCustomId('ticket_priority_select')
            .setPlaceholder('Selecione a nova prioridade')
            .addOptions(priorities)
    );

    const embed = new EmbedBuilder()
        .setColor(0xFFA500)
        .setTitle('‚ö° Alterar Prioridade do Ticket')
        .setDescription('Selecione a nova prioridade para este ticket:')
        .addFields(
            { name: 'üî¥ Alta', value: 'Problemas cr√≠ticos e urgentes', inline: true },
            { name: 'üü° Normal', value: 'Quest√µes padr√£o do dia a dia', inline: true },
            { name: 'üü¢ Baixa', value: 'D√∫vidas e sugest√µes', inline: true }
        );

    await interaction.editReply({
        embeds: [embed],
        components: [selectMenu]
    });
}

// Handler para gerar transcri√ß√£o do ticket
async function handleTicketTranscript(interaction) {
    const embed = new EmbedBuilder()
        .setColor(0x3498DB)
        .setTitle('üìÑ Gerando Transcri√ß√£o')
        .setDescription('‚è≥ Coletando mensagens do ticket...\n\nProcesso iniciado, aguarde...')
        .setTimestamp();

    await interaction.editReply({
        embeds: [embed]
    });

    try {
        const channel = interaction.channel;
        const messages = await channel.messages.fetch({ limit: 100 });
        const messageArray = Array.from(messages.values()).reverse();
        
        // Criar transcri√ß√£o em texto
        let transcript = `=== TRANSCRI√á√ÉO DO TICKET ===\n`;
        transcript += `Canal: ${channel.name}\n`;
        transcript += `ID do Canal: ${channel.id}\n`;
        transcript += `Gerado em: ${new Date().toLocaleString('pt-PT')}\n`;
        transcript += `Gerado por: ${interaction.user.tag}\n`;
        transcript += `Total de Mensagens: ${messageArray.length}\n`;
        transcript += `\n${'='.repeat(50)}\n\n`;
        
        const participants = new Set();
        
        for (const message of messageArray) {
            const timestamp = message.createdAt.toLocaleString('pt-PT');
            const author = message.author.tag;
            participants.add(author);
            
            transcript += `[${timestamp}] ${author}: `;
            
            if (message.content) {
                transcript += message.content;
            }
            
            if (message.embeds.length > 0) {
                transcript += ' [EMBED]';
                for (const embed of message.embeds) {
                    if (embed.title) transcript += ` T√≠tulo: ${embed.title}`;
                    if (embed.description) transcript += ` Descri√ß√£o: ${embed.description}`;
                }
            }
            
            if (message.attachments.size > 0) {
                transcript += ' [ANEXOS: ';
                transcript += Array.from(message.attachments.values()).map(att => att.name).join(', ');
                transcript += ']';
            }
            
            transcript += '\n';
        }
        
        transcript += `\n${'='.repeat(50)}\n`;
        transcript += `Participantes (${participants.size}): ${Array.from(participants).join(', ')}\n`;
        transcript += `Fim da transcri√ß√£o`;
        
        // Criar arquivo
        const fs = require('fs');
        const path = require('path');
        
        const fileName = `transcript-${channel.name}-${Date.now()}.txt`;
        const filePath = path.join(__dirname, '..', 'logs', fileName);
        
        // Garantir que o diret√≥rio existe
        const logDir = path.join(__dirname, '..', 'logs');
        if (!fs.existsSync(logDir)) {
            fs.mkdirSync(logDir, { recursive: true });
        }
        
        fs.writeFileSync(filePath, transcript, 'utf8');
        
        // Calcular estat√≠sticas
        const startTime = messageArray[0]?.createdAt || new Date();
        const endTime = messageArray[messageArray.length - 1]?.createdAt || new Date();
        const duration = Math.abs(endTime - startTime);
        const hours = Math.floor(duration / (1000 * 60 * 60));
        const minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));
        
        const successEmbed = new EmbedBuilder()
            .setColor(0x00FF00)
            .setTitle('‚úÖ Transcri√ß√£o Gerada')
            .setDescription('A transcri√ß√£o do ticket foi gerada com sucesso!')
            .addFields(
                { 
                    name: 'üìä Estat√≠sticas', 
                    value: `**Mensagens:** ${messageArray.length}\n**Participantes:** ${participants.size}\n**Dura√ß√£o:** ${hours}h ${minutes}m`, 
                    inline: true 
                },
                { 
                    name: 'üìÖ Per√≠odo', 
                    value: `**In√≠cio:** <t:${Math.floor(startTime.getTime() / 1000)}:f>\n**Fim:** <t:${Math.floor(endTime.getTime() / 1000)}:f>`, 
                    inline: true 
                },
                {
                    name: 'üìÑ Arquivo',
                    value: `**Nome:** \`${fileName}\`\n**Tamanho:** ${(transcript.length / 1024).toFixed(2)} KB`,
                    inline: false
                }
            )
            .setTimestamp();

        await interaction.followUp({
            embeds: [successEmbed],
            files: [{
                attachment: filePath,
                name: fileName
            }],
            flags: MessageFlags.Ephemeral
        });
        
        // Log da opera√ß√£o
        logger.info(`üìÑ Transcri√ß√£o gerada para ticket ${channel.id} por ${interaction.user.tag} - ${messageArray.length} mensagens`);
        
        // Limpar arquivo ap√≥s 10 segundos (opcional)
        setTimeout(() => {
            if (fs.existsSync(filePath)) {
                fs.unlinkSync(filePath);
                logger.info(`üóëÔ∏è Arquivo de transcri√ß√£o tempor√°rio removido: ${fileName}`);
            }
        }, 10000);
        
    } catch (error) {
        logger.error('Erro ao gerar transcri√ß√£o:', error);
        
        const errorEmbed = new EmbedBuilder()
            .setColor(0xFF0000)
            .setTitle('‚ùå Erro na Transcri√ß√£o')
            .setDescription('Ocorreu um erro ao gerar a transcri√ß√£o do ticket.')
            .addFields(
                { name: 'üêõ Erro', value: error.message || 'Erro desconhecido', inline: false }
            )
            .setTimestamp();

        await interaction.followUp({
            embeds: [errorEmbed],
            flags: MessageFlags.Ephemeral
        });
    }
}

// Handler para adicionar utilizador ao ticket
async function handleAddUser(interaction) {
    const modal = new ModalBuilder()
        .setCustomId('ticket_add_user_modal')
        .setTitle('‚ûï Adicionar Utilizador ao Ticket');

    const userInput = new TextInputBuilder()
        .setCustomId('user_id_input')
        .setLabel('ID ou Men√ß√£o do Utilizador')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('@utilizador ou 123456789012345678')
        .setRequired(true)
        .setMaxLength(100);

    const reasonInput = new TextInputBuilder()
        .setCustomId('reason_input')
        .setLabel('Motivo (Opcional)')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('Motivo para adicionar o utilizador...')
        .setRequired(false)
        .setMaxLength(200);

    const firstRow = new ActionRowBuilder().addComponents(userInput);
    const secondRow = new ActionRowBuilder().addComponents(reasonInput);
    
    modal.addComponents(firstRow, secondRow);
    
    await interaction.showModal(modal);
}

// Handler para remover utilizador do ticket
async function handleRemoveUser(interaction) {
    const modal = new ModalBuilder()
        .setCustomId('ticket_remove_user_modal')
        .setTitle('‚ûñ Remover Utilizador do Ticket');

    const userInput = new TextInputBuilder()
        .setCustomId('user_id_input')
        .setLabel('ID ou Men√ß√£o do Utilizador')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('@utilizador ou 123456789012345678')
        .setRequired(true)
        .setMaxLength(100);

    const reasonInput = new TextInputBuilder()
        .setCustomId('reason_input')
        .setLabel('Motivo (Opcional)')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('Motivo para remover o utilizador...')
        .setRequired(false)
        .setMaxLength(200);

    const firstRow = new ActionRowBuilder().addComponents(userInput);
    const secondRow = new ActionRowBuilder().addComponents(reasonInput);
    
    modal.addComponents(firstRow, secondRow);
    
    await interaction.showModal(modal);
}

// Handler para renomear o canal do ticket
async function handleTicketRename(interaction) {
    const embed = new EmbedBuilder()
        .setColor(0x9B59B6)
        .setTitle('‚úèÔ∏è Renomear Canal do Ticket')
        .setDescription('Para renomear este canal, envie o novo nome na pr√≥xima mensagem.\n\n**Formato atual:** `ticket-utilizador-categoria`\n**Exemplo:** `ticket-suporte-t√©cnico`')
        .addFields(
            { name: 'üìù Regras', value: '‚Ä¢ Apenas letras, n√∫meros e h√≠fens\n‚Ä¢ M√°ximo 100 caracteres\n‚Ä¢ M√≠nimo 2 caracteres', inline: false }
        );

    await interaction.editReply({
        embeds: [embed]
    });
}

// Handler para sele√ß√£o de prioridade
async function handlePrioritySelection(interaction) {
    const selectedPriority = interaction.values[0];
    
    const priorityMap = {
        'high': { emoji: 'üî¥', name: 'Alta Prioridade', color: 0xFF0000 },
        'normal': { emoji: 'üü°', name: 'Prioridade Normal', color: 0xFFD700 },
        'low': { emoji: 'üü¢', name: 'Baixa Prioridade', color: 0x00FF00 }
    };

    const priority = priorityMap[selectedPriority];
    
    if (!priority) {
        return await interaction.editReply({
            content: '‚ùå Prioridade inv√°lida selecionada.',
            flags: MessageFlags.Ephemeral
        });
    }

    // Atualizar o nome do canal se poss√≠vel
    try {
        const channel = interaction.channel;
        const currentName = channel.name;
        
        // Remover indicadores de prioridade antigos
        let newName = currentName.replace(/^(üî¥|üü°|üü¢)/, '');
        
        // Adicionar novo indicador de prioridade
        newName = `${priority.emoji}${newName}`;
        
        await channel.setName(newName);
        
        const successEmbed = new EmbedBuilder()
            .setColor(priority.color)
            .setTitle('‚ö° Prioridade Atualizada')
            .setDescription(`A prioridade do ticket foi alterada para **${priority.name}**`)
            .addFields(
                { name: 'üéØ Nova Prioridade', value: `${priority.emoji} ${priority.name}`, inline: true },
                { name: 'üè∑Ô∏è Canal Atualizado', value: `${priority.emoji} Nome do canal atualizado`, inline: true },
                { name: '‚è∞ Alterado em', value: `<t:${Math.floor(Date.now() / 1000)}:f>`, inline: true }
            )
            .setTimestamp();

        await interaction.editReply({
            embeds: [successEmbed]
        });

        // Log da altera√ß√£o de prioridade
        logger.info(`üéØ Prioridade do ticket ${channel.id} alterada para ${priority.name} por ${interaction.user.tag}`);
        
    } catch (error) {
        logger.error('Erro ao alterar prioridade:', error);
        
        const errorEmbed = new EmbedBuilder()
            .setColor(0xFF0000)
            .setTitle('‚ùå Erro ao Alterar Prioridade')
            .setDescription('N√£o foi poss√≠vel alterar o nome do canal, mas a prioridade foi registrada.')
            .addFields(
                { name: 'üéØ Prioridade Selecionada', value: `${priority.emoji} ${priority.name}`, inline: true }
            );

        await interaction.editReply({
            embeds: [errorEmbed]
        });
    }
}

// Handler para modal de adicionar utilizador
async function handleAddUserModal(interaction) {
    await interaction.deferReply({ flags: MessageFlags.Ephemeral });
    
    const userInput = interaction.fields.getTextInputValue('user_id_input');
    const reason = interaction.fields.getTextInputValue('reason_input') || 'Sem motivo especificado';
    
    try {
        // Extrair ID do utilizador (remover <@> se for men√ß√£o)
        const userId = userInput.replace(/[<@!>]/g, '');
        
        // Validar se √© um ID v√°lido
        if (!/^\d{17,19}$/.test(userId)) {
            return await interaction.editReply({
                content: '‚ùå ID de utilizador inv√°lido. Use um ID v√°lido ou mencione o utilizador.',
                flags: MessageFlags.Ephemeral
            });
        }
        
        // Buscar o membro
        const guild = interaction.guild;
        const member = await guild.members.fetch(userId).catch(() => null);
        
        if (!member) {
            return await interaction.editReply({
                content: '‚ùå Utilizador n√£o encontrado neste servidor.',
                flags: MessageFlags.Ephemeral
            });
        }
        
        // Verificar se j√° tem acesso
        const channel = interaction.channel;
        const permissions = channel.permissionsFor(member);
        
        if (permissions && permissions.has('ViewChannel')) {
            return await interaction.editReply({
                content: `‚ùå ${member.user.tag} j√° tem acesso a este ticket.`,
                flags: MessageFlags.Ephemeral
            });
        }
        
        // Adicionar permiss√µes
        await channel.permissionOverwrites.edit(member, {
            ViewChannel: true,
            SendMessages: true,
            ReadMessageHistory: true,
            AttachFiles: true,
            EmbedLinks: true
        });
        
        // Enviar mensagem de confirma√ß√£o
        const successEmbed = new EmbedBuilder()
            .setColor(0x00FF00)
            .setTitle('‚ûï Utilizador Adicionado')
            .setDescription(`${member.user.tag} foi adicionado ao ticket com sucesso!`)
            .addFields(
                { name: 'üë§ Utilizador', value: `${member.user.tag} (${member.user.id})`, inline: true },
                { name: 'üéØ Motivo', value: reason, inline: true },
                { name: '‚è∞ Adicionado em', value: `<t:${Math.floor(Date.now() / 1000)}:f>`, inline: true }
            )
            .setThumbnail(member.user.displayAvatarURL({ dynamic: true }))
            .setTimestamp();
        
        await interaction.editReply({
            embeds: [successEmbed]
        });
        
        // Mensagem no canal do ticket
        await channel.send({
            content: `üéØ ${member} foi adicionado ao ticket por ${interaction.user}`,
            embeds: [new EmbedBuilder()
                .setColor(0x00FF00)
                .setDescription(`**Motivo:** ${reason}`)
                .setTimestamp()
            ]
        });
        
        logger.info(`‚ûï Utilizador ${member.user.tag} adicionado ao ticket ${channel.id} por ${interaction.user.tag}`);
        
    } catch (error) {
        logger.error('Erro ao adicionar utilizador ao ticket:', error);
        await interaction.editReply({
            content: '‚ùå Erro ao adicionar utilizador. Verifique as permiss√µes do bot.',
            flags: MessageFlags.Ephemeral
        });
    }
}

// Handler para modal de remover utilizador
async function handleRemoveUserModal(interaction) {
    await interaction.deferReply({ flags: MessageFlags.Ephemeral });
    
    const userInput = interaction.fields.getTextInputValue('user_id_input');
    const reason = interaction.fields.getTextInputValue('reason_input') || 'Sem motivo especificado';
    
    try {
        // Extrair ID do utilizador
        const userId = userInput.replace(/[<@!>]/g, '');
        
        // Validar ID
        if (!/^\d{17,19}$/.test(userId)) {
            return await interaction.editReply({
                content: '‚ùå ID de utilizador inv√°lido. Use um ID v√°lido ou mencione o utilizador.',
                flags: MessageFlags.Ephemeral
            });
        }
        
        // Buscar o membro
        const guild = interaction.guild;
        const member = await guild.members.fetch(userId).catch(() => null);
        
        if (!member) {
            return await interaction.editReply({
                content: '‚ùå Utilizador n√£o encontrado neste servidor.',
                flags: MessageFlags.Ephemeral
            });
        }
        
        // Verificar se tem acesso
        const channel = interaction.channel;
        const permissions = channel.permissionsFor(member);
        
        if (!permissions || !permissions.has('ViewChannel')) {
            return await interaction.editReply({
                content: `‚ùå ${member.user.tag} n√£o tem acesso a este ticket.`,
                flags: MessageFlags.Ephemeral
            });
        }
        
        // Remover permiss√µes
        await channel.permissionOverwrites.delete(member);
        
        // Enviar mensagem de confirma√ß√£o
        const successEmbed = new EmbedBuilder()
            .setColor(0xFF6B6B)
            .setTitle('‚ûñ Utilizador Removido')
            .setDescription(`${member.user.tag} foi removido do ticket com sucesso!`)
            .addFields(
                { name: 'üë§ Utilizador', value: `${member.user.tag} (${member.user.id})`, inline: true },
                { name: 'üéØ Motivo', value: reason, inline: true },
                { name: '‚è∞ Removido em', value: `<t:${Math.floor(Date.now() / 1000)}:f>`, inline: true }
            )
            .setThumbnail(member.user.displayAvatarURL({ dynamic: true }))
            .setTimestamp();
        
        await interaction.editReply({
            embeds: [successEmbed]
        });
        
        // Mensagem no canal do ticket
        const removalEmbed = new EmbedBuilder()
            .setColor(0xFF6B6B)
            .setTitle('üö´ Utilizador Removido do Ticket')
            .setDescription([
                `### ÔøΩ **${member.user.tag}** foi removido do sistema de suporte`,
                '',
                `**üîí Acesso revogado:** O utilizador j√° n√£o pode ver nem participar neste ticket`,
                `**üëÆ Removido por:** ${interaction.user.tag}`,
                `**üìù Motivo:** ${reason}`,
                `**‚è∞ Data/Hora:** <t:${Math.floor(Date.now() / 1000)}:f>`,
                '',
                '> *Esta a√ß√£o foi registrada no sistema de logs para auditoria*'
            ].join('\n'))
            .setThumbnail(member.user.displayAvatarURL({ dynamic: true }))
            .setFooter({ 
                text: 'üõ°Ô∏è Sistema de Gest√£o de Tickets | A√ß√£o de Modera√ß√£o',
                iconURL: interaction.guild.iconURL({ dynamic: true })
            })
            .setTimestamp();

        await channel.send({
            embeds: [removalEmbed]
        });
        
        logger.info(`‚ûñ Utilizador ${member.user.tag} removido do ticket ${channel.id} por ${interaction.user.tag}`);
        
    } catch (error) {
        logger.error('Erro ao remover utilizador do ticket:', error);
        await interaction.editReply({
            content: '‚ùå Erro ao remover utilizador. Verifique as permiss√µes do bot.',
            flags: MessageFlags.Ephemeral
        });
    }
}
