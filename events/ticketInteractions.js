const { Events, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, MessageFlags, EmbedBuilder, StringSelectMenuBuilder } = require('discord.js');
const logger = require('../utils/logger');
const rateLimit = require('../utils/rateLimit');

// Handler para bot√£o de System Status
async function handleSystemStatus(interaction) {
    const visualAssets = require('../assets/visual-assets');

    const statusEmbed = new EmbedBuilder()
        .setColor('#00D26A')
        .setTitle('üìä **STATUS DO SISTEMA**')
        .setThumbnail(visualAssets.realImages.supportIcon)
        .setDescription([
            '### üîã **SERVI√áOS OPERACIONAIS**',
            '',
            'üü¢ **Bot Principal:** `ONLINE`',
            'üü¢ **Sistema de Tickets:** `OPERACIONAL`',
            'üü¢ **Base de Dados:** `CONECTADA`',
            'üü¢ **Webhooks:** `FUNCIONAIS`',
            'üü¢ **Auto-detec√ß√£o Staff:** `ATIVA`',
            '',
            '### üìà **ESTAT√çSTICAS EM TEMPO REAL**',
            '',
            `üìç **Servidor:** ${interaction.guild.name}`,
            `üë• **Membros Online:** ${interaction.guild.members.cache.filter(m => !m.user.bot && m.presence?.status !== 'offline').size}`,
            `üé´ **Tickets Ativos:** Em funcionamento`,
            `‚ö° **Lat√™ncia:** ${interaction.client.ws.ping}ms`,
            '',
            '### ‚è±Ô∏è **TEMPO DE RESPOSTA**',
            '',
            'üéØ **Meta SLA:** < 15 minutos',
            'üìä **Uptime:** 99.9%',
            'üîÑ **√öltima Atualiza√ß√£o:** Agora',
            '',
            '> üí° **Sistema monitorizado 24/7**'
        ].join('\n'))
        .addFields(
            {
                name: 'üè¢ Infraestrutura',
                value: '`Railway Platform`',
                inline: true
            },
            {
                name: '‚ö° Performance',
                value: '`Excelente`',
                inline: true
            },
            {
                name: 'üîí Seguran√ßa',
                value: '`Ativa`',
                inline: true
            }
        )
        .setFooter({ 
            text: 'Sistema de Tickets v2.0 ‚Ä¢ Status verificado',
            iconURL: interaction.client.user.displayAvatarURL()
        })
        .setTimestamp();

    await interaction.editReply({
        embeds: [statusEmbed]
    });
}

// Handler para bot√£o de Support Info
async function handleSupportInfo(interaction) {
    const visualAssets = require('../assets/visual-assets');

    const infoEmbed = new EmbedBuilder()
        .setColor('#5865F2')
        .setTitle('üíº **INFORMA√á√ïES DE SUPORTE**')
        .setThumbnail(visualAssets.realImages.supportIcon)
        .setImage(visualAssets.realImages.supportBanner)
        .setDescription([
            '### üìã **COMO USAR O SISTEMA**',
            '',
            '**1Ô∏è‚É£ CRIAR TICKET**',
            '‚îî Clique no bot√£o do departamento apropriado',
            '‚îî Um canal privado ser√° criado automaticamente',
            '',
            '**2Ô∏è‚É£ AGUARDAR RESPOSTA**',
            '‚îî Nossa equipe ser√° notificada instantaneamente',
            '‚îî Tempo m√©dio de resposta: **15 minutos**',
            '',
            '**3Ô∏è‚É£ COMUNICA√á√ÉO**',
            '‚îî Forne√ßa o m√°ximo de detalhes poss√≠vel',
            '‚îî Anexe capturas de ecr√£ se necess√°rio',
            '',
            '### üéØ **DEPARTAMENTOS DISPON√çVEIS**',
            '',
            'üîß **Suporte T√©cnico**',
            '‚Ä¢ Problemas com configura√ß√µes',
            '‚Ä¢ Bugs e falhas t√©cnicas',
            '‚Ä¢ Assist√™ncia com funcionalidades',
            '',
            '‚ö†Ô∏è **Reportar Problemas**',
            '‚Ä¢ Incidentes cr√≠ticos',
            '‚Ä¢ Falhas graves do sistema',
            '‚Ä¢ Emerg√™ncias t√©cnicas',
            '',
            'üõ°Ô∏è **Modera√ß√£o e Seguran√ßa**',
            '‚Ä¢ Den√∫ncias de utilizadores',
            '‚Ä¢ Viola√ß√µes de regras',
            '‚Ä¢ Quest√µes disciplinares',
            '',
            '### ‚ö° **RECURSOS AVAN√áADOS**',
            '',
            '‚Ä¢ **ü§ñ Detec√ß√£o Autom√°tica** de staff',
            '‚Ä¢ **üîí Canais Privados** seguros',
            '‚Ä¢ **üìä Transcri√ß√µes** completas',
            '‚Ä¢ **‚ö° Notifica√ß√µes** instant√¢neas',
            '‚Ä¢ **üìà Estat√≠sticas** detalhadas'
        ].join('\n'))
        .addFields(
            {
                name: '‚è∞ Hor√°rio de Funcionamento',
                value: '`24 horas por dia, 7 dias por semana`',
                inline: true
            },
            {
                name: 'üìû Canais de Contacto',
                value: '`Sistema de Tickets apenas`',
                inline: true
            },
            {
                name: 'üåê Idiomas Suportados',
                value: '`Portugu√™s ‚Ä¢ Ingl√™s`',
                inline: true
            }
        )
        .setFooter({ 
            text: 'Precisa de ajuda? Crie um ticket usando os bot√µes acima',
            iconURL: interaction.guild.iconURL({ dynamic: true })
        })
        .setTimestamp();

    await interaction.editReply({
        embeds: [infoEmbed]
    });
}

module.exports = {
    name: Events.InteractionCreate,
    once: false,
    async execute(interaction) {
        // Ignorar intera√ß√µes que n√£o s√£o relacionadas a tickets
        if (!interaction.customId?.startsWith('ticket_')) return;

        // Verificar se a intera√ß√£o j√° foi respondida (timeout protection)
        if (interaction.replied || interaction.deferred) {
            logger.warn(`Tentativa de processar intera√ß√£o j√° respondida: ${interaction.customId}`);
            return;
        }

        try {
            // Handle button interactions for tickets
            if (interaction.isButton()) {
                const parts = interaction.customId.split('_');
                const [prefix, action, type] = parts;

                if (action === 'create') {
                    // CRIA√á√ÉO DIRETA DE TICKET - sem modal
                    await interaction.deferReply({ flags: MessageFlags.Ephemeral });
                    
                    // Verificar rate limit
                    const rateLimitKey = `ticket:${interaction.user.id}`;
                    const { allowed, resetTime } = rateLimit.check(rateLimitKey, 3, 3600000);

                    if (!allowed) {
                        const resetIn = Math.ceil((resetTime - Date.now()) / 60000);
                        return await interaction.editReply({
                            content: `‚ùå Voc√™ atingiu o limite de tickets. Tente novamente em ${resetIn} minutos.`
                        });
                    }

                    // Check for existing tickets
                    const existingTickets = await interaction.client.storage.getUserActiveTickets(
                        interaction.user.id,
                        interaction.guildId
                    );

                    if (existingTickets.length > 0) {
                        return await interaction.editReply({
                            content: `‚ùå Voc√™ j√° tem um ticket aberto: <#${existingTickets[0].channel_id}>`
                        });
                    }
                    
                    const ticketManager = interaction.client.ticketManager;
                    
                    // Usar descri√ß√£o padr√£o baseada no tipo
                    const defaultDescription = `Ticket criado para categoria: ${type}`;
                    
                    // Criar ticket diretamente
                    await ticketManager.handleTicketCreate(interaction, type, defaultDescription);
                } 
                else if (action === 'status') {
                    // Bot√£o de Status do Sistema
                    await interaction.deferReply({ flags: MessageFlags.Ephemeral });
                    await handleSystemStatus(interaction);
                }
                else if (action === 'info') {
                    // Bot√£o de Informa√ß√µes
                    await interaction.deferReply({ flags: MessageFlags.Ephemeral });
                    await handleSupportInfo(interaction);
                }
                else {
                    try {
                        // Defer the reply first
                        await interaction.deferReply({ flags: MessageFlags.Ephemeral });
                        const ticketManager = interaction.client.ticketManager;

                        switch (action) {
                            case 'close':
                                await ticketManager.handleTicketClose(interaction);
                                break;
                            case 'claim':
                                await ticketManager.handleTicketClaim(interaction);
                                break;
                            case 'priority':
                                await handleTicketPriority(interaction);
                                break;
                            case 'transcript':
                                await handleTicketTranscript(interaction);
                                break;
                            case 'add':
                                if (type === 'user') await handleAddUser(interaction);
                                break;
                            case 'remove':
                                if (type === 'user') await handleRemoveUser(interaction);
                                break;
                            case 'rename':
                                await handleTicketRename(interaction);
                                break;
                            default:
                                await interaction.editReply({
                                    content: '‚ùå A√ß√£o de ticket inv√°lida.',
                                    flags: MessageFlags.Ephemeral
                                });
                        }
                    } catch (actionError) {
                        logger.error('Erro ao processar a√ß√£o do ticket:', actionError);
                        if (!interaction.replied && !interaction.deferred) {
                            await interaction.reply({
                                content: '‚ùå Erro ao processar a√ß√£o. Por favor, tente novamente.',
                                flags: MessageFlags.Ephemeral
                            }).catch(() => {});
                        } else if (interaction.deferred) {
                            await interaction.editReply({
                                content: '‚ùå Erro ao processar a√ß√£o. Por favor, tente novamente.',
                                flags: MessageFlags.Ephemeral
                            }).catch(() => {});
                        }
                    }
                }
            }
            // Modal submission handler removed - tickets are now created directly without modals
        } catch (error) {
            logger.error('Erro ao processar intera√ß√£o de ticket:', error);
            
            // Handle error response
            const response = {
                content: '‚ùå Ocorreu um erro ao processar sua solicita√ß√£o. Por favor, tente novamente.',
                ephemeral: true
            };

            // Try to send the error response
            try {
                if (interaction.replied) {
                    await interaction.followUp(response);
                } else if (interaction.deferred) {
                    await interaction.editReply(response);
                } else {
                    await interaction.reply(response);
                }
            } catch (followUpError) {
                logger.error('Erro ao enviar resposta de erro:', followUpError);
            }
        }
    }
};

// Handler para alterar prioridade do ticket
async function handleTicketPriority(interaction) {
    const priorities = [
        { label: 'üî¥ Alta Prioridade', value: 'high', emoji: 'üî¥' },
        { label: 'üü° Prioridade Normal', value: 'normal', emoji: 'üü°' },
        { label: 'üü¢ Baixa Prioridade', value: 'low', emoji: 'üü¢' }
    ];

    const selectMenu = new ActionRowBuilder().addComponents(
        new StringSelectMenuBuilder()
            .setCustomId('ticket_priority_select')
            .setPlaceholder('Selecione a nova prioridade')
            .addOptions(priorities)
    );

    const embed = new EmbedBuilder()
        .setColor(0xFFA500)
        .setTitle('‚ö° Alterar Prioridade do Ticket')
        .setDescription('Selecione a nova prioridade para este ticket:')
        .addFields(
            { name: 'üî¥ Alta', value: 'Problemas cr√≠ticos e urgentes', inline: true },
            { name: 'üü° Normal', value: 'Quest√µes padr√£o do dia a dia', inline: true },
            { name: 'üü¢ Baixa', value: 'D√∫vidas e sugest√µes', inline: true }
        );

    await interaction.editReply({
        embeds: [embed],
        components: [selectMenu]
    });
}

// Handler para gerar transcri√ß√£o do ticket
async function handleTicketTranscript(interaction) {
    const embed = new EmbedBuilder()
        .setColor(0x3498DB)
        .setTitle('üìÑ Gerando Transcri√ß√£o')
        .setDescription('‚è≥ Processando mensagens do ticket...\n\nA transcri√ß√£o ser√° enviada em breve.')
        .setTimestamp();

    await interaction.editReply({
        embeds: [embed]
    });

    // Simular gera√ß√£o de transcri√ß√£o (implementar l√≥gica real depois)
    setTimeout(async () => {
        const successEmbed = new EmbedBuilder()
            .setColor(0x00FF00)
            .setTitle('‚úÖ Transcri√ß√£o Gerada')
            .setDescription('A transcri√ß√£o do ticket foi gerada com sucesso!')
            .addFields(
                { name: 'üìä Estat√≠sticas', value: `**Mensagens:** 0\n**Participantes:** 1\n**Dura√ß√£o:** N/A`, inline: true },
                { name: 'üìÖ Per√≠odo', value: `**In√≠cio:** <t:${Math.floor(Date.now() / 1000)}:f>\n**Fim:** <t:${Math.floor(Date.now() / 1000)}:f>`, inline: true }
            );

        await interaction.followUp({
            embeds: [successEmbed],
            flags: MessageFlags.Ephemeral
        });
    }, 3000);
}

// Handler para adicionar utilizador ao ticket
async function handleAddUser(interaction) {
    const embed = new EmbedBuilder()
        .setColor(0x00FF00)
        .setTitle('‚ûï Adicionar Utilizador ao Ticket')
        .setDescription('Para adicionar um utilizador ao ticket, mencione-o ou forne√ßa o ID.\n\n**Exemplo:** `@utilizador` ou `123456789012345678`')
        .addFields(
            { name: 'üîç Como encontrar o ID?', value: 'Ative o Modo Desenvolvedor nas configura√ß√µes do Discord e clique com o bot√£o direito no utilizador.', inline: false }
        );

    await interaction.editReply({
        embeds: [embed]
    });
}

// Handler para remover utilizador do ticket
async function handleRemoveUser(interaction) {
    const embed = new EmbedBuilder()
        .setColor(0xFF0000)
        .setTitle('‚ûñ Remover Utilizador do Ticket')
        .setDescription('Para remover um utilizador do ticket, mencione-o ou forne√ßa o ID.\n\n**Exemplo:** `@utilizador` ou `123456789012345678`')
        .addFields(
            { name: '‚ö†Ô∏è Aten√ß√£o', value: 'O utilizador perder√° acesso imediato ao ticket.', inline: false }
        );

    await interaction.editReply({
        embeds: [embed]
    });
}

// Handler para renomear o canal do ticket
async function handleTicketRename(interaction) {
    const embed = new EmbedBuilder()
        .setColor(0x9B59B6)
        .setTitle('‚úèÔ∏è Renomear Canal do Ticket')
        .setDescription('Para renomear este canal, envie o novo nome na pr√≥xima mensagem.\n\n**Formato atual:** `ticket-utilizador-categoria`\n**Exemplo:** `ticket-suporte-t√©cnico`')
        .addFields(
            { name: 'üìù Regras', value: '‚Ä¢ Apenas letras, n√∫meros e h√≠fens\n‚Ä¢ M√°ximo 100 caracteres\n‚Ä¢ M√≠nimo 2 caracteres', inline: false }
        );

    await interaction.editReply({
        embeds: [embed]
    });
}
