(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[938],{434:function(e,t,a){Promise.resolve().then(a.bind(a,3971))},3971:function(e,t,a){"use strict";a.d(t,{default:function(){return l}});var n=a(7437),r=a(2265),i=a(9988),o=a(2837);let c={prefix:"!",locale:"pt",logsEnabled:!0,modlogChannelId:""};function l(){let[e,t]=(0,r.useState)(c),[a,l]=(0,r.useState)(!1),[s,d]=(0,r.useState)(!1),u=(0,o._)();(0,r.useEffect)(()=>{u&&(async()=>{try{var e,a,n,r,o;let l=await (null===(e=i.h.getSettings)||void 0===e?void 0:e.call(i.h,u));l&&t({prefix:null!==(a=l.prefix)&&void 0!==a?a:c.prefix,locale:null!==(n=l.locale)&&void 0!==n?n:c.locale,logsEnabled:null!==(r=l.logsEnabled)&&void 0!==r?r:c.logsEnabled,modlogChannelId:null!==(o=l.modlogChannelId)&&void 0!==o?o:c.modlogChannelId})}catch(e){}d(!0)})()},[u]);let g=async()=>{if(u){l(!0);try{var t;await (null===(t=i.h.postSettings)||void 0===t?void 0:t.call(i.h,u,e))}finally{l(!1)}}};return(0,n.jsxs)("form",{className:"card p-5 max-w-xl space-y-4",onSubmit:e=>{e.preventDefault(),g()},children:[(0,n.jsxs)("div",{children:[(0,n.jsx)("label",{htmlFor:"prefix",className:"block text-sm mb-1",children:"Prefix"}),(0,n.jsx)("input",{id:"prefix",title:"Command prefix",placeholder:"!",className:"w-full rounded-lg bg-neutral-900 border border-neutral-800 px-3 py-2",value:e.prefix,onChange:e=>t(t=>({...t,prefix:e.target.value}))})]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("label",{htmlFor:"locale",className:"block text-sm mb-1",children:"Locale"}),(0,n.jsxs)("select",{id:"locale",title:"Preferred language",className:"w-full rounded-lg bg-neutral-900 border border-neutral-800 px-3 py-2",value:e.locale,onChange:e=>t(t=>({...t,locale:e.target.value})),children:[(0,n.jsx)("option",{value:"pt",children:"Portugu\xeas"}),(0,n.jsx)("option",{value:"en",children:"English"})]})]}),(0,n.jsxs)("div",{className:"flex items-center gap-2",children:[(0,n.jsx)("input",{id:"logsEnabled",type:"checkbox",className:"h-4 w-4",checked:e.logsEnabled,onChange:e=>t(t=>({...t,logsEnabled:e.target.checked}))}),(0,n.jsx)("label",{htmlFor:"logsEnabled",className:"text-sm",children:"Enable moderation logs"})]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("label",{htmlFor:"modlog",className:"block text-sm mb-1",children:"Mod-log Channel ID"}),(0,n.jsx)("input",{id:"modlog",title:"Channel ID for moderation logs",placeholder:"1234567890",className:"w-full rounded-lg bg-neutral-900 border border-neutral-800 px-3 py-2",value:e.modlogChannelId,onChange:e=>t(t=>({...t,modlogChannelId:e.target.value}))})]}),(0,n.jsx)("div",{className:"flex gap-2 pt-2",children:(0,n.jsx)("button",{disabled:a,className:"px-4 py-2 rounded-lg bg-brand-600 hover:bg-brand-700 font-medium disabled:opacity-60",children:a?"Saving…":s?"Save settings":"Loading…"})})]})}},9988:function(e,t,a){"use strict";a.d(t,{h:function(){return n}});let n={async getLogStats(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/logs/stats").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch stats");return n.json()},async getLogs(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/logs").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch logs");return n.json()},exportLogsUrl(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"";return"/api/guild/".concat(e,"/logs/export").concat(a)},async getSettings(e){let t=await fetch("/api/guild/".concat(e,"/settings"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch settings");return t.json()},async postSettings(e,t){let a=await fetch("/api/guild/".concat(e,"/settings"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to save settings");return a.json()},async getRoles(e){let t=await fetch("/api/guild/".concat(e,"/roles"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch roles");return t.json()},async getMembers(e,t){let a=t?new URLSearchParams(Object.entries(t).filter(e=>{let[,t]=e;return null!=t}).map(e=>{let[t,a]=e;return[t,String(a)]})).toString():"",n=await fetch("/api/guild/".concat(e,"/members").concat(a?"?".concat(a):""),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch members");return n.json()},async getCurrentUser(){let e=await fetch("/api/user",{credentials:"include"});if(!e.ok)throw Error("Failed to fetch current user");return e.json()},async getTickets(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/tickets").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch tickets");return n.json()},exportTicketsUrl(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"";return"/api/guild/".concat(e,"/tickets/export").concat(a)},async getTicketDetails(e,t){let a=await fetch("/api/guild/".concat(e,"/tickets/").concat(t),{credentials:"include"});if(!a.ok)throw Error("Failed to fetch ticket details");return a.json()},async getTicketLogs(e,t,a){let n=a?"?".concat(new URLSearchParams(Object.entries(a).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",r=await fetch("/api/guild/".concat(e,"/tickets/").concat(t,"/logs").concat(n),{credentials:"include"});if(!r.ok)throw Error("Failed to fetch ticket logs");return r.json()},async getTicketMessages(e,t,a){let n=a?"?".concat(new URLSearchParams(Object.entries(a).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",r=await fetch("/api/guild/".concat(e,"/tickets/").concat(t,"/messages").concat(n),{credentials:"include"});if(!r.ok)throw Error("Failed to fetch ticket messages");return r.json()},async ticketAction(e,t,a,n){let r=await fetch("/api/guild/".concat(e,"/tickets/").concat(t,"/action"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({action:a,data:n})});if(!r.ok)throw Error("Failed to perform ticket action");return r.json()},async getPanels(e){let t=await fetch("/api/guild/".concat(e,"/panels"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch panels");return t.json()},async scanPanels(e){let t=await fetch("/api/guild/".concat(e,"/panels/scan"),{method:"POST",credentials:"include"});if(!t.ok)throw Error("Failed to scan panels");return t.json()},async createPanel(e,t){let a=await fetch("/api/guild/".concat(e,"/panels/create"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to create panel");return a.json()},async panelAction(e,t,a,n){let r=await fetch("/api/guild/".concat(e,"/panels/").concat(t,"/action"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({action:a,data:n})});if(!r.ok)throw Error("Failed to perform panel action");return r.json()},async getCategories(e){let t=await fetch("/api/guild/".concat(e,"/categories"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch categories");return t.json()},async createCategory(e,t){let a=await fetch("/api/guild/".concat(e,"/categories/create"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to create category");return a.json()},async getChannels(e){let t=await fetch("/api/guild/".concat(e,"/channels"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch channels");return t.json()},async getTicketsConfig(e){let t=await fetch("/api/guild/".concat(e,"/tickets/config"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch tickets config");return t.json()},async saveTicketsConfig(e,t){let a=await fetch("/api/guild/".concat(e,"/tickets/config"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to save tickets config");return a.json()},async getCommands(e){let t=await fetch("/api/guild/".concat(e,"/commands"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch commands");return t.json()},async postCommand(e,t){let a=await fetch("/api/guild/".concat(e,"/commands"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to execute command action");return a.json()},async getAutomodEvents(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/mod/automod/events").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch automod events");return n.json()},async reviewAutomodEvent(e,t,a,n){let r=await fetch("/api/guild/".concat(e,"/mod/automod/events/").concat(t,"/review"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({action:a})});if(!r.ok)throw Error("Failed to review event");return r.json()},async getAppeals(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/mod/appeals").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch appeals");return n.json()},async decideAppeal(e,t,a,n){let r=await fetch("/api/guild/".concat(e,"/mod/appeals/").concat(t,"/decision"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({status:a,response:n||""})});if(!r.ok)throw Error("Failed to submit appeal decision");return r.json()},async getVerificationMetrics(e){let t=await fetch("/api/guild/".concat(e,"/verification/metrics"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch verification metrics");return t.json()},async getVerificationLogs(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/verification/logs").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch verification logs");return n.json()},async purgeVerificationLogs(e){let t=await fetch("/api/guild/".concat(e,"/verification/logs"),{method:"DELETE",credentials:"include"});if(!t.ok)throw Error("Failed to purge verification logs");return t.json()}}},2837:function(e,t,a){"use strict";function n(){return new URL(window.location.href).searchParams.get("guildId")||localStorage.getItem("guildId")}function r(e){let t=!(arguments.length>1)||void 0===arguments[1]||arguments[1],a=(e||"").trim();if(a?localStorage.setItem("guildId",a):localStorage.removeItem("guildId"),t)try{let e=new URL(window.location.href);a?e.searchParams.set("guildId",a):e.searchParams.delete("guildId"),window.history.replaceState({},"",e.toString())}catch(e){}}a.d(t,{J:function(){return r},_:function(){return n}})}},function(e){e.O(0,[971,23,744],function(){return e(e.s=434)}),_N_E=e.O()}]);