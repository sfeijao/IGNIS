(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[146],{3871:function(e,t,a){Promise.resolve().then(a.bind(a,4271))},4271:function(e,t,a){"use strict";a.d(t,{default:function(){return o}});var n=a(7437),i=a(2265),c=a(2837),r=a(9988);function o(){let[e,t]=(0,i.useState)(null),[a,o]=(0,i.useState)([]),[s,l]=(0,i.useState)(!1),[d,u]=(0,i.useState)(null),[h,g]=(0,i.useState)({});(0,i.useEffect)(()=>{t((0,c._)())},[]);let p=async e=>{l(!0),u(null);try{let t=await r.h.getAppeals(e,{status:"pending"});o((null==t?void 0:t.appeals)||t||[])}catch(e){u((null==e?void 0:e.message)||"Erro ao carregar apelos")}finally{l(!1)}};(0,i.useEffect)(()=>{e&&p(e)},[e]);let f=async(t,a)=>{if(e){l(!0);try{await r.h.decideAppeal(e,t,"approve"===a?"accepted":"rejected",h[t]),await p(e)}finally{l(!1)}}};return(0,n.jsxs)("div",{className:"space-y-4",children:[(0,n.jsxs)("div",{className:"flex items-center gap-2",children:[(0,n.jsx)("h2",{className:"text-xl font-semibold",children:"Apelos (pendentes)"}),(0,n.jsx)("button",{className:"btn btn-secondary",onClick:()=>e&&p(e),title:"Recarregar",children:"Recarregar"})]}),d&&(0,n.jsx)("div",{className:"text-red-400",children:d}),(0,n.jsxs)("section",{className:"card",children:[(0,n.jsx)("div",{className:"card-header",children:"Fila"}),(0,n.jsxs)("div",{className:"card-body grid gap-3",children:[0===a.length&&(0,n.jsx)("div",{className:"opacity-70",children:"Sem apelos"}),a.map(e=>(0,n.jsxs)("div",{className:"p-3 rounded-lg bg-neutral-800/50 border border-neutral-800",children:[(0,n.jsxs)("div",{className:"text-sm opacity-70",children:[e.userId," • Caso ",e.caseId," • ",new Date(e.createdAt||Date.now()).toLocaleString()]}),(0,n.jsxs)("div",{className:"mt-1",children:["Motivo: ",e.reason||"(sem motivo)"]}),(0,n.jsxs)("div",{className:"mt-2 grid grid-cols-1 md:grid-cols-3 gap-2 items-end",children:[(0,n.jsxs)("label",{className:"flex flex-col gap-1 md:col-span-2",children:[(0,n.jsx)("span",{className:"text-sm opacity-80",children:"Justificativa da decis\xe3o"}),(0,n.jsx)("input",{className:"input",value:h[e.id]||"",onChange:t=>g(a=>({...a,[e.id]:t.target.value})),placeholder:"Opcional",title:"Justificativa"})]}),(0,n.jsxs)("div",{className:"flex gap-2",children:[(0,n.jsx)("button",{className:"btn btn-primary btn-xs",onClick:()=>f(e.id,"approve"),children:"Aprovar"}),(0,n.jsx)("button",{className:"btn btn-danger btn-xs",onClick:()=>f(e.id,"deny"),children:"Negar"})]})]})]},e.id))]})]})]})}},9988:function(e,t,a){"use strict";a.d(t,{h:function(){return n}});let n={async getLogStats(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/logs/stats").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch stats");return n.json()},async getLogs(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/logs").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch logs");return n.json()},exportLogsUrl(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"";return"/api/guild/".concat(e,"/logs/export").concat(a)},async getSettings(e){let t=await fetch("/api/guild/".concat(e,"/settings"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch settings");return t.json()},async postSettings(e,t){let a=await fetch("/api/guild/".concat(e,"/settings"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to save settings");return a.json()},async getRoles(e){let t=await fetch("/api/guild/".concat(e,"/roles"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch roles");return t.json()},async getMembers(e,t){let a=t?new URLSearchParams(Object.entries(t).filter(e=>{let[,t]=e;return null!=t}).map(e=>{let[t,a]=e;return[t,String(a)]})).toString():"",n=await fetch("/api/guild/".concat(e,"/members").concat(a?"?".concat(a):""),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch members");return n.json()},async getCurrentUser(){let e=await fetch("/api/user",{credentials:"include"});if(!e.ok)throw Error("Failed to fetch current user");return e.json()},async getTickets(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/tickets").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch tickets");return n.json()},exportTicketsUrl(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"";return"/api/guild/".concat(e,"/tickets/export").concat(a)},async getTicketDetails(e,t){let a=await fetch("/api/guild/".concat(e,"/tickets/").concat(t),{credentials:"include"});if(!a.ok)throw Error("Failed to fetch ticket details");return a.json()},async getTicketLogs(e,t,a){let n=a?"?".concat(new URLSearchParams(Object.entries(a).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",i=await fetch("/api/guild/".concat(e,"/tickets/").concat(t,"/logs").concat(n),{credentials:"include"});if(!i.ok)throw Error("Failed to fetch ticket logs");return i.json()},async getTicketMessages(e,t,a){let n=a?"?".concat(new URLSearchParams(Object.entries(a).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",i=await fetch("/api/guild/".concat(e,"/tickets/").concat(t,"/messages").concat(n),{credentials:"include"});if(!i.ok)throw Error("Failed to fetch ticket messages");return i.json()},async ticketAction(e,t,a,n){let i=await fetch("/api/guild/".concat(e,"/tickets/").concat(t,"/action"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({action:a,data:n})});if(!i.ok)throw Error("Failed to perform ticket action");return i.json()},async getPanels(e){let t=await fetch("/api/guild/".concat(e,"/panels"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch panels");return t.json()},async scanPanels(e){let t=await fetch("/api/guild/".concat(e,"/panels/scan"),{method:"POST",credentials:"include"});if(!t.ok)throw Error("Failed to scan panels");return t.json()},async createPanel(e,t){let a=await fetch("/api/guild/".concat(e,"/panels/create"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to create panel");return a.json()},async panelAction(e,t,a,n){let i=await fetch("/api/guild/".concat(e,"/panels/").concat(t,"/action"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({action:a,data:n})});if(!i.ok)throw Error("Failed to perform panel action");return i.json()},async getCategories(e){let t=await fetch("/api/guild/".concat(e,"/categories"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch categories");return t.json()},async createCategory(e,t){let a=await fetch("/api/guild/".concat(e,"/categories/create"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to create category");return a.json()},async getChannels(e){let t=await fetch("/api/guild/".concat(e,"/channels"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch channels");return t.json()},async getTicketsConfig(e){let t=await fetch("/api/guild/".concat(e,"/tickets/config"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch tickets config");return t.json()},async saveTicketsConfig(e,t){let a=await fetch("/api/guild/".concat(e,"/tickets/config"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to save tickets config");return a.json()},async getCommands(e){let t=await fetch("/api/guild/".concat(e,"/commands"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch commands");return t.json()},async postCommand(e,t){let a=await fetch("/api/guild/".concat(e,"/commands"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to execute command action");return a.json()},async getAutomodEvents(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/mod/automod/events").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch automod events");return n.json()},async reviewAutomodEvent(e,t,a,n){let i=await fetch("/api/guild/".concat(e,"/mod/automod/events/").concat(t,"/review"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({action:a})});if(!i.ok)throw Error("Failed to review event");return i.json()},async getAppeals(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/mod/appeals").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch appeals");return n.json()},async decideAppeal(e,t,a,n){let i=await fetch("/api/guild/".concat(e,"/mod/appeals/").concat(t,"/decision"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({status:a,response:n||""})});if(!i.ok)throw Error("Failed to submit appeal decision");return i.json()},async getVerificationMetrics(e){let t=await fetch("/api/guild/".concat(e,"/verification/metrics"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch verification metrics");return t.json()},async getVerificationLogs(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/verification/logs").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch verification logs");return n.json()},async purgeVerificationLogs(e){let t=await fetch("/api/guild/".concat(e,"/verification/logs"),{method:"DELETE",credentials:"include"});if(!t.ok)throw Error("Failed to purge verification logs");return t.json()}}},2837:function(e,t,a){"use strict";function n(){return new URL(window.location.href).searchParams.get("guildId")||localStorage.getItem("guildId")}function i(e){let t=!(arguments.length>1)||void 0===arguments[1]||arguments[1],a=(e||"").trim();if(a?localStorage.setItem("guildId",a):localStorage.removeItem("guildId"),t)try{let e=new URL(window.location.href);a?e.searchParams.set("guildId",a):e.searchParams.delete("guildId"),window.history.replaceState({},"",e.toString())}catch(e){}}a.d(t,{J:function(){return i},_:function(){return n}})}},function(e){e.O(0,[971,23,744],function(){return e(e.s=3871)}),_N_E=e.O()}]);