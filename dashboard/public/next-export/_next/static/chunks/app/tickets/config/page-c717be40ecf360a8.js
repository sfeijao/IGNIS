(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[922],{2728:function(e,t,a){Promise.resolve().then(a.bind(a,3842))},3842:function(e,t,a){"use strict";a.d(t,{default:function(){return o}});var n=a(7437),c=a(2265),i=a(2837),r=a(9988);function o(){let[e,t]=(0,c.useState)(null),[a,o]=(0,c.useState)({}),[l,d]=(0,c.useState)(""),[u,h]=(0,c.useState)(!1),[g,f]=(0,c.useState)(null),[p,m]=(0,c.useState)(!1);(0,c.useEffect)(()=>{t((0,i._)())},[]),(0,c.useEffect)(()=>{(async()=>{if(e){h(!0),f(null),m(!1);try{let t=await r.h.getTicketsConfig(e),a=(null==t?void 0:t.config)||t||{};o(a),d(JSON.stringify(a,null,2))}catch(e){f((null==e?void 0:e.message)||"Erro ao carregar config")}finally{h(!1)}}})()},[e]);let w=async()=>{if(e){h(!0),f(null),m(!1);try{let t=a;try{t=JSON.parse(l)}catch(e){}let n=await r.h.saveTicketsConfig(e,t),c=(null==n?void 0:n.config)||t;o(c),d(JSON.stringify(c,null,2)),m(!0)}catch(e){f((null==e?void 0:e.message)||"Erro ao salvar config")}finally{h(!1)}}};return(0,n.jsxs)("div",{className:"space-y-4",children:[(0,n.jsxs)("div",{className:"flex items-center gap-2",children:[(0,n.jsx)("h2",{className:"text-xl font-semibold",children:"Configura\xe7\xe3o de Tickets"}),(0,n.jsx)("button",{onClick:()=>e&&t(e),className:"btn btn-secondary",title:"Recarregar",children:"Recarregar"})]}),g&&(0,n.jsx)("div",{className:"text-red-400",children:g}),(0,n.jsxs)("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-6",children:[(0,n.jsxs)("section",{className:"card",children:[(0,n.jsx)("div",{className:"card-header",children:"Campos comuns"}),(0,n.jsxs)("div",{className:"card-body grid grid-cols-1 gap-3",children:[(0,n.jsx)(s,{label:"Canal do painel",value:a.panelChannelId||"",onChange:e=>o(t=>({...t,panelChannelId:e})),placeholder:"ID do canal"}),(0,n.jsx)(s,{label:"Cargo da equipe",value:a.staffRoleId||"",onChange:e=>o(t=>({...t,staffRoleId:e})),placeholder:"ID do cargo"}),(0,n.jsx)(s,{label:"Categoria de arquivo",value:a.archiveCategoryId||"",onChange:e=>o(t=>({...t,archiveCategoryId:e})),placeholder:"ID da categoria"}),(0,n.jsx)(s,{label:"Canal de logs",value:a.logChannelId||"",onChange:e=>o(t=>({...t,logChannelId:e})),placeholder:"ID do canal de logs"}),(0,n.jsx)(s,{label:"Webhook de transcri\xe7\xe3o",value:a.transcriptWebhook||"",onChange:e=>o(t=>({...t,transcriptWebhook:e})),placeholder:"URL do webhook"}),(0,n.jsxs)("div",{className:"flex items-center gap-3",children:[(0,n.jsx)("label",{className:"text-sm opacity-80",children:"Ativar tickets"}),(0,n.jsx)("input",{type:"checkbox",checked:!!a.enabled,onChange:e=>o(t=>({...t,enabled:e.target.checked})),title:"Ativar"})]}),(0,n.jsx)("button",{className:"btn btn-primary w-fit",onClick:w,disabled:u,children:"Salvar"}),p&&(0,n.jsx)("span",{className:"text-green-400",children:"Salvo!"})]})]}),(0,n.jsxs)("section",{className:"card",children:[(0,n.jsx)("div",{className:"card-header",children:"Editor JSON (avan\xe7ado)"}),(0,n.jsxs)("div",{className:"card-body",children:[(0,n.jsx)("textarea",{className:"input min-h-[280px] font-mono",value:l,onChange:e=>d(e.target.value),title:"Editor JSON"}),(0,n.jsxs)("div",{className:"mt-3 flex gap-2",children:[(0,n.jsx)("button",{className:"btn btn-secondary",onClick:()=>d(JSON.stringify(a,null,2)),children:"Reverter"}),(0,n.jsx)("button",{className:"btn btn-primary",onClick:w,disabled:u,children:"Salvar JSON"})]})]})]})]})]})}function s(e){let{label:t,value:a,onChange:c,placeholder:i}=e;return(0,n.jsxs)("label",{className:"flex flex-col gap-1",children:[(0,n.jsx)("span",{className:"text-sm opacity-80",children:t}),(0,n.jsx)("input",{className:"input",value:a,onChange:e=>c(e.target.value),placeholder:i,title:t})]})}},9988:function(e,t,a){"use strict";a.d(t,{h:function(){return n}});let n={async getLogStats(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/logs/stats").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch stats");return n.json()},async getLogs(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/logs").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch logs");return n.json()},exportLogsUrl(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"";return"/api/guild/".concat(e,"/logs/export").concat(a)},async getSettings(e){let t=await fetch("/api/guild/".concat(e,"/settings"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch settings");return t.json()},async postSettings(e,t){let a=await fetch("/api/guild/".concat(e,"/settings"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to save settings");return a.json()},async getRoles(e){let t=await fetch("/api/guild/".concat(e,"/roles"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch roles");return t.json()},async getMembers(e,t){let a=t?new URLSearchParams(Object.entries(t).filter(e=>{let[,t]=e;return null!=t}).map(e=>{let[t,a]=e;return[t,String(a)]})).toString():"",n=await fetch("/api/guild/".concat(e,"/members").concat(a?"?".concat(a):""),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch members");return n.json()},async getCurrentUser(){let e=await fetch("/api/user",{credentials:"include"});if(!e.ok)throw Error("Failed to fetch current user");return e.json()},async getTickets(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/tickets").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch tickets");return n.json()},exportTicketsUrl(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"";return"/api/guild/".concat(e,"/tickets/export").concat(a)},async getTicketDetails(e,t){let a=await fetch("/api/guild/".concat(e,"/tickets/").concat(t),{credentials:"include"});if(!a.ok)throw Error("Failed to fetch ticket details");return a.json()},async getTicketLogs(e,t,a){let n=a?"?".concat(new URLSearchParams(Object.entries(a).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",c=await fetch("/api/guild/".concat(e,"/tickets/").concat(t,"/logs").concat(n),{credentials:"include"});if(!c.ok)throw Error("Failed to fetch ticket logs");return c.json()},async getTicketMessages(e,t,a){let n=a?"?".concat(new URLSearchParams(Object.entries(a).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",c=await fetch("/api/guild/".concat(e,"/tickets/").concat(t,"/messages").concat(n),{credentials:"include"});if(!c.ok)throw Error("Failed to fetch ticket messages");return c.json()},async ticketAction(e,t,a,n){let c=await fetch("/api/guild/".concat(e,"/tickets/").concat(t,"/action"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({action:a,data:n})});if(!c.ok)throw Error("Failed to perform ticket action");return c.json()},async getPanels(e){let t=await fetch("/api/guild/".concat(e,"/panels"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch panels");return t.json()},async scanPanels(e){let t=await fetch("/api/guild/".concat(e,"/panels/scan"),{method:"POST",credentials:"include"});if(!t.ok)throw Error("Failed to scan panels");return t.json()},async createPanel(e,t){let a=await fetch("/api/guild/".concat(e,"/panels/create"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to create panel");return a.json()},async panelAction(e,t,a,n){let c=await fetch("/api/guild/".concat(e,"/panels/").concat(t,"/action"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({action:a,data:n})});if(!c.ok)throw Error("Failed to perform panel action");return c.json()},async getCategories(e){let t=await fetch("/api/guild/".concat(e,"/categories"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch categories");return t.json()},async createCategory(e,t){let a=await fetch("/api/guild/".concat(e,"/categories/create"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to create category");return a.json()},async getChannels(e){let t=await fetch("/api/guild/".concat(e,"/channels"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch channels");return t.json()},async getTicketsConfig(e){let t=await fetch("/api/guild/".concat(e,"/tickets/config"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch tickets config");return t.json()},async saveTicketsConfig(e,t){let a=await fetch("/api/guild/".concat(e,"/tickets/config"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to save tickets config");return a.json()},async getCommands(e){let t=await fetch("/api/guild/".concat(e,"/commands"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch commands");return t.json()},async postCommand(e,t){let a=await fetch("/api/guild/".concat(e,"/commands"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to execute command action");return a.json()},async getAutomodEvents(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/mod/automod/events").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch automod events");return n.json()},async reviewAutomodEvent(e,t,a,n){let c=await fetch("/api/guild/".concat(e,"/mod/automod/events/").concat(t,"/review"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({decision:a,reason:n})});if(!c.ok)throw Error("Failed to review event");return c.json()},async getAppeals(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/mod/appeals").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch appeals");return n.json()},async decideAppeal(e,t,a,n){let c=await fetch("/api/guild/".concat(e,"/mod/appeals/").concat(t,"/decision"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({decision:a,reason:n})});if(!c.ok)throw Error("Failed to submit appeal decision");return c.json()},async getVerificationMetrics(e){let t=await fetch("/api/guild/".concat(e,"/verification/metrics"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch verification metrics");return t.json()},async getVerificationLogs(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/verification/logs").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch verification logs");return n.json()},async purgeVerificationLogs(e){let t=await fetch("/api/guild/".concat(e,"/verification/logs"),{method:"DELETE",credentials:"include"});if(!t.ok)throw Error("Failed to purge verification logs");return t.json()}}},2837:function(e,t,a){"use strict";function n(){return new URL(window.location.href).searchParams.get("guildId")||localStorage.getItem("guildId")}function c(e){let t=!(arguments.length>1)||void 0===arguments[1]||arguments[1],a=(e||"").trim();if(a?localStorage.setItem("guildId",a):localStorage.removeItem("guildId"),t)try{let e=new URL(window.location.href);a?e.searchParams.set("guildId",a):e.searchParams.delete("guildId"),window.history.replaceState({},"",e.toString())}catch(e){}}a.d(t,{J:function(){return c},_:function(){return n}})}},function(e){e.O(0,[971,23,744],function(){return e(e.s=2728)}),_N_E=e.O()}]);