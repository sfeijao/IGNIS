(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[360],{8819:function(e,t,a){Promise.resolve().then(a.bind(a,1313))},1313:function(e,t,a){"use strict";a.d(t,{default:function(){return o}});var n=a(7437),c=a(2265),i=a(2837),r=a(9988);function o(){let[e,t]=(0,c.useState)(null),[a,o]=(0,c.useState)([]),[s,l]=(0,c.useState)(!1),[d,u]=(0,c.useState)(null),[h,g]=(0,c.useState)(null),[f,p]=(0,c.useState)(""),[m,w]=(0,c.useState)(""),[y,j]=(0,c.useState)("");(0,c.useEffect)(()=>{t((0,i._)())},[]);let S=async e=>{l(!0),u(null),g(null);try{let t=await r.h.getCommands(e),a=(null==t?void 0:t.commands)||t||[];o(a)}catch(e){u((null==e?void 0:e.message)||"Erro ao carregar comandos")}finally{l(!1)}};(0,c.useEffect)(()=>{e&&S(e)},[e]);let k=async t=>{if(e){l(!0),u(null),g(null);try{let a=await r.h.postCommand(e,t);g(JSON.stringify(a)),await S(e)}catch(e){u((null==e?void 0:e.message)||"Falha na a\xe7\xe3o")}finally{l(!1)}}};return(0,n.jsxs)("div",{className:"space-y-6",children:[(0,n.jsxs)("div",{className:"flex items-center gap-2",children:[(0,n.jsx)("h2",{className:"text-xl font-semibold",children:"Comandos do Servidor"}),(0,n.jsx)("button",{className:"btn btn-secondary",onClick:()=>e&&S(e),title:"Recarregar",children:"Recarregar"}),(0,n.jsx)("button",{className:"btn btn-primary",onClick:()=>k({action:"deploy"}),title:"Re-deploy",children:"Re-deploy"}),(0,n.jsx)("button",{className:"btn btn-secondary",onClick:()=>k({action:"sync"}),title:"Sincronizar",children:"Sync"}),(0,n.jsx)("button",{className:"btn btn-danger",onClick:()=>k({action:"clear"}),title:"Limpar comandos do servidor",children:"Limpar"})]}),d&&(0,n.jsx)("div",{className:"text-red-400",children:d}),h&&(0,n.jsx)("pre",{className:"text-xs opacity-70 max-h-40 overflow-auto",children:h}),(0,n.jsxs)("section",{className:"card",children:[(0,n.jsx)("div",{className:"card-header",children:"Executar comando"}),(0,n.jsxs)("div",{className:"card-body grid grid-cols-1 md:grid-cols-4 gap-3",children:[(0,n.jsxs)("label",{className:"flex flex-col gap-1",children:[(0,n.jsx)("span",{className:"text-sm opacity-80",children:"Nome"}),(0,n.jsx)("input",{className:"input",value:f,onChange:e=>p(e.target.value),placeholder:"ex: ping",title:"Nome do comando"})]}),(0,n.jsxs)("label",{className:"flex flex-col gap-1",children:[(0,n.jsx)("span",{className:"text-sm opacity-80",children:"Argumentos"}),(0,n.jsx)("input",{className:"input",value:m,onChange:e=>w(e.target.value),placeholder:"ex: user:@ignis",title:"Argumentos"})]}),(0,n.jsxs)("label",{className:"flex flex-col gap-1",children:[(0,n.jsx)("span",{className:"text-sm opacity-80",children:"Canal (opcional)"}),(0,n.jsx)("input",{className:"input",value:y,onChange:e=>j(e.target.value),placeholder:"ID do canal",title:"Canal"})]}),(0,n.jsx)("div",{className:"flex items-end",children:(0,n.jsx)("button",{className:"btn btn-primary",onClick:()=>k({action:"run",name:f,args:m,channelId:y||void 0}),disabled:!f,children:"Executar"})})]})]}),(0,n.jsxs)("section",{className:"card",children:[(0,n.jsx)("div",{className:"card-header",children:"Comandos registrados"}),(0,n.jsx)("div",{className:"card-body grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3",children:a.map(e=>(0,n.jsxs)("div",{className:"p-3 rounded-lg bg-neutral-800/50 border border-neutral-800",children:[(0,n.jsxs)("div",{className:"font-medium",children:["/",e.name]}),(0,n.jsx)("div",{className:"text-xs opacity-70",children:e.description||"Sem descri\xe7\xe3o"})]},e.id||e.name))})]})]})}},9988:function(e,t,a){"use strict";a.d(t,{h:function(){return n}});let n={async getLogStats(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/logs/stats").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch stats");return n.json()},async getLogs(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/logs").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch logs");return n.json()},exportLogsUrl(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"";return"/api/guild/".concat(e,"/logs/export").concat(a)},async getSettings(e){let t=await fetch("/api/guild/".concat(e,"/settings"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch settings");return t.json()},async postSettings(e,t){let a=await fetch("/api/guild/".concat(e,"/settings"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to save settings");return a.json()},async getRoles(e){let t=await fetch("/api/guild/".concat(e,"/roles"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch roles");return t.json()},async getMembers(e,t){let a=t?new URLSearchParams(Object.entries(t).filter(e=>{let[,t]=e;return null!=t}).map(e=>{let[t,a]=e;return[t,String(a)]})).toString():"",n=await fetch("/api/guild/".concat(e,"/members").concat(a?"?".concat(a):""),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch members");return n.json()},async getCurrentUser(){let e=await fetch("/api/user",{credentials:"include"});if(!e.ok)throw Error("Failed to fetch current user");return e.json()},async getTickets(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/tickets").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch tickets");return n.json()},exportTicketsUrl(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"";return"/api/guild/".concat(e,"/tickets/export").concat(a)},async getTicketDetails(e,t){let a=await fetch("/api/guild/".concat(e,"/tickets/").concat(t),{credentials:"include"});if(!a.ok)throw Error("Failed to fetch ticket details");return a.json()},async getTicketLogs(e,t,a){let n=a?"?".concat(new URLSearchParams(Object.entries(a).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",c=await fetch("/api/guild/".concat(e,"/tickets/").concat(t,"/logs").concat(n),{credentials:"include"});if(!c.ok)throw Error("Failed to fetch ticket logs");return c.json()},async getTicketMessages(e,t,a){let n=a?"?".concat(new URLSearchParams(Object.entries(a).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",c=await fetch("/api/guild/".concat(e,"/tickets/").concat(t,"/messages").concat(n),{credentials:"include"});if(!c.ok)throw Error("Failed to fetch ticket messages");return c.json()},async ticketAction(e,t,a,n){let c=await fetch("/api/guild/".concat(e,"/tickets/").concat(t,"/action"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({action:a,data:n})});if(!c.ok)throw Error("Failed to perform ticket action");return c.json()},async getPanels(e){let t=await fetch("/api/guild/".concat(e,"/panels"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch panels");return t.json()},async scanPanels(e){let t=await fetch("/api/guild/".concat(e,"/panels/scan"),{method:"POST",credentials:"include"});if(!t.ok)throw Error("Failed to scan panels");return t.json()},async createPanel(e,t){let a=await fetch("/api/guild/".concat(e,"/panels/create"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to create panel");return a.json()},async panelAction(e,t,a,n){let c=await fetch("/api/guild/".concat(e,"/panels/").concat(t,"/action"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({action:a,data:n})});if(!c.ok)throw Error("Failed to perform panel action");return c.json()},async getCategories(e){let t=await fetch("/api/guild/".concat(e,"/categories"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch categories");return t.json()},async createCategory(e,t){let a=await fetch("/api/guild/".concat(e,"/categories/create"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to create category");return a.json()},async getChannels(e){let t=await fetch("/api/guild/".concat(e,"/channels"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch channels");return t.json()},async getTicketsConfig(e){let t=await fetch("/api/guild/".concat(e,"/tickets/config"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch tickets config");return t.json()},async saveTicketsConfig(e,t){let a=await fetch("/api/guild/".concat(e,"/tickets/config"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to save tickets config");return a.json()},async getCommands(e){let t=await fetch("/api/guild/".concat(e,"/commands"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch commands");return t.json()},async postCommand(e,t){let a=await fetch("/api/guild/".concat(e,"/commands"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to execute command action");return a.json()},async getAutomodEvents(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/mod/automod/events").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch automod events");return n.json()},async reviewAutomodEvent(e,t,a,n){let c=await fetch("/api/guild/".concat(e,"/mod/automod/events/").concat(t,"/review"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({action:a})});if(!c.ok)throw Error("Failed to review event");return c.json()},async getAppeals(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/mod/appeals").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch appeals");return n.json()},async decideAppeal(e,t,a,n){let c=await fetch("/api/guild/".concat(e,"/mod/appeals/").concat(t,"/decision"),{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({status:a,response:n||""})});if(!c.ok)throw Error("Failed to submit appeal decision");return c.json()},async getVerificationMetrics(e){let t=await fetch("/api/guild/".concat(e,"/verification/metrics"),{credentials:"include"});if(!t.ok)throw Error("Failed to fetch verification metrics");return t.json()},async getVerificationLogs(e,t){let a=t?"?".concat(new URLSearchParams(Object.entries(t).map(e=>{let[t,a]=e;return[t,String(a)]}))):"",n=await fetch("/api/guild/".concat(e,"/verification/logs").concat(a),{credentials:"include"});if(!n.ok)throw Error("Failed to fetch verification logs");return n.json()},async purgeVerificationLogs(e){let t=await fetch("/api/guild/".concat(e,"/verification/logs"),{method:"DELETE",credentials:"include"});if(!t.ok)throw Error("Failed to purge verification logs");return t.json()}}},2837:function(e,t,a){"use strict";function n(){return new URL(window.location.href).searchParams.get("guildId")||localStorage.getItem("guildId")}function c(e){let t=!(arguments.length>1)||void 0===arguments[1]||arguments[1],a=(e||"").trim();if(a?localStorage.setItem("guildId",a):localStorage.removeItem("guildId"),t)try{let e=new URL(window.location.href);a?e.searchParams.set("guildId",a):e.searchParams.delete("guildId"),window.history.replaceState({},"",e.toString())}catch(e){}}a.d(t,{J:function(){return c},_:function(){return n}})}},function(e){e.O(0,[971,23,744],function(){return e(e.s=8819)}),_N_E=e.O()}]);