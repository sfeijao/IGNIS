(function(){ const p=new URLSearchParams(window.location.search); const guildId=p.get('guildId'); const els={mode:document.getElementById('mode'), method:document.getElementById('method'), logFails:document.getElementById('logFails'), save:document.getElementById('save'), formError:document.getElementById('formError'), methodHelp:document.getElementById('methodHelp')}; let original={}; function notify(m,t='info'){const n=document.createElement('div'); n.className=`notification notification-${t} slide-up`; n.innerHTML=`<i class="fas ${t==='error'?'fa-exclamation-circle': t==='success'?'fa-check-circle':'fa-info-circle'}"></i><span>${m}</span>`; document.body.appendChild(n); setTimeout(()=>{n.style.animation='slideDown 0.3s ease-in'; setTimeout(()=>n.remove(),300);},2500);} function setHelp(){ const m=els.method?.value||'button'; const help={ button:'O usuário clica num botão para verificar. Requer permissões para enviar mensagens no canal.', image:'Gera um captcha de imagem. O bot precisa poder enviar imagens/anexos.', reaction:'O usuário reage à mensagem para verificar. Garanta que o bot pode adicionar reações.', form:'Formulário com perguntas. Requer configuração adicional (perguntas e critérios).'}; if(els.methodHelp){ els.methodHelp.textContent = help[m] || ''; } } function validate(){ const errors=[]; const mode=els.mode?.value; const method=els.method?.value; const allowedModes=['easy','medium','hard']; const allowedMethods=['button','image','reaction','form']; if(!allowedModes.includes(mode)) errors.push('Selecione um modo válido'); if(!allowedMethods.includes(method)) errors.push('Selecione um método válido'); if(els.formError){ els.formError.style.display = errors.length? 'block':'none'; els.formError.textContent = errors.join(' • '); } const changed = (original.mode!==mode) || (original.method!==method) || (Boolean(original.logFails)!==Boolean(els.logFails?.checked)); els.save && (els.save.disabled = errors.length>0 || !changed); } async function load(){ try{ const r=await fetch(`/api/guild/${guildId}/verification/config`, {credentials:'same-origin'}); const d=await r.json(); if(!r.ok||!d.success) throw new Error(d.error||`HTTP ${r.status}`); const c=d.config||{}; original={ mode:c.mode||'easy', method:c.method||'button', logFails:!!c.logFails }; if(els.mode) els.mode.value=original.mode; if(els.method) els.method.value=original.method; if(els.logFails) els.logFails.checked=original.logFails; setHelp(); validate(); }catch(e){console.error(e); notify(e.message,'error');} } async function save(){ try{ validate(); if(els.save?.disabled) return; els.save.disabled=true; const body={ mode:els.mode?.value||'easy', method:els.method?.value||'button', logFails:!!els.logFails?.checked }; const r=await fetch(`/api/guild/${guildId}/verification/config`, {method:'POST', headers:{'Content-Type':'application/json'}, credentials:'same-origin', body:JSON.stringify(body)}); const d=await r.json(); if(!r.ok||!d.success) throw new Error(d.error||`HTTP ${r.status}`); original={...body}; notify('Guardado','success'); }catch(e){console.error(e); notify(e.message,'error');} finally{ validate(); } } els.mode?.addEventListener('change', ()=>{ setHelp(); validate(); }); els.method?.addEventListener('change', ()=>{ setHelp(); validate(); }); els.logFails?.addEventListener('change', ()=> validate()); els.save?.addEventListener('click', save); load(); })();