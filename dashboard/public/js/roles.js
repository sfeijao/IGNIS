(function(){
	const p=new URLSearchParams(window.location.search); const guildId=p.get('guildId');
	const els={ search:document.getElementById('search'), roleFilter:document.getElementById('roleFilter'), refresh:document.getElementById('refresh'), members:document.getElementById('members'), roles:document.getElementById('roles'), selectAll:document.getElementById('selectAllMembers'), clearSel:document.getElementById('clearMembers'), bulkRole:document.getElementById('bulkRole'), bulkAdd:document.getElementById('bulkAddRole'), bulkRemove:document.getElementById('bulkRemoveRole'), bulkProgress:document.getElementById('bulkProgress'), bulkPanel:document.getElementById('bulkPanel'), bulkResults:document.getElementById('bulkResults'), copyBulkSummary:document.getElementById('copyBulkSummary'), clearBulkResults:document.getElementById('clearBulkResults'), openOnFailOnly:document.getElementById('openOnFailOnly') };
	let allRoles=[]; let members=[]; let selectedMember=null; let selectedRoles=new Set(); let multiSel=new Set();
	function notify(m,t='info'){ const n=document.createElement('div'); n.className=`notification notification-${t} slide-up`; n.innerHTML=`<i class="fas ${t==='error'?'fa-exclamation-circle': t==='success'?'fa-check-circle':'fa-info-circle'}"></i><span>${m}</span>`; document.body.appendChild(n); setTimeout(()=>{n.style.animation='slideDown 0.3s ease-in'; setTimeout(()=>n.remove(),300);},2500); }
	function escapeHtml(s){ return String(s||'').replace(/[&<>"']/g,c=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'}[c]||c)); }
	async function loadRoles(){ const r=await fetch(`/api/guild/${guildId}/roles`,{credentials:'same-origin'}); const d=await r.json(); if(!r.ok||!d.success) throw new Error(d.error||`HTTP ${r.status}`); allRoles = d.roles||[]; renderRolesList(); if(els.roleFilter){ els.roleFilter.innerHTML='<option value="">Todos os cargos</option>'+allRoles.map(r=>`<option value="${r.id}">${escapeHtml(r.name)}</option>`).join(''); } if(els.bulkRole){ els.bulkRole.innerHTML='<option value="">(Selecionar cargo)</option>'+allRoles.map(r=>`<option value="${r.id}">${escapeHtml(r.name)}</option>`).join(''); } }
	async function loadMembers(refresh=false){ const q=(els.search?.value||'').trim(); const role=(els.roleFilter?.value||'').trim(); const url=new URL(`/api/guild/${guildId}/members`, window.location.origin); if(q) url.searchParams.set('q',q); if(role) url.searchParams.set('role',role); url.searchParams.set('limit','100'); if(refresh) url.searchParams.set('refresh','true'); const r=await fetch(url.toString(),{credentials:'same-origin'}); const d=await r.json(); if(!r.ok||!d.success) throw new Error(d.error||`HTTP ${r.status}`); members=d.members||[]; renderMembers(); }
	function renderMembers(){ if(!els.members) return; if(!members.length){ els.members.innerHTML='<div class="text-secondary">Sem resultados.</div>'; return; } els.members.innerHTML = members.map(m=>{ const avatar=m.avatar?`https://cdn.discordapp.com/avatars/${m.id}/${m.avatar}.png`:'/default-avatar.svg'; const chips=(m.roles||[]).slice(0,5).map(id=>{ const r=allRoles.find(x=>x.id===id); return r?`<span class="role-chip">${escapeHtml(r.name)}</span>`:''; }).join(' '); const checked = multiSel.has(m.id)? 'checked':''; return `<div class="member" data-id="${m.id}"><div class="member-left"><input type="checkbox" class="msel" data-id="${m.id}" ${checked}/><img src="${avatar}" class="user-avatar" style="width:28px;height:28px;border-radius:50%"/><div><div><strong>${escapeHtml(m.username)}</strong> <span class="text-secondary">#${escapeHtml(m.discriminator)}</span></div><div class="mt-4">${chips}</div></div></div><div><button class="btn btn-secondary btn-sm" data-act="edit" data-id="${m.id}"><i class="fas fa-pen"></i></button></div></div>`; }).join(''); els.members.querySelectorAll('button[data-act="edit"]').forEach(btn=> btn.addEventListener('click', ()=>{ openMember(btn.getAttribute('data-id')); })); els.members.querySelectorAll('input.msel').forEach(chk=> chk.addEventListener('change', ()=>{ const id=chk.getAttribute('data-id'); if(chk.checked) multiSel.add(id); else multiSel.delete(id); })); }
	function renderRolesList(){ if(!els.roles) return; els.roles.innerHTML = allRoles.map(r=>{ const checked = selectedRoles.has(r.id)?'checked':''; const dis = r.managed? 'disabled':''; const color = r.color && r.color!=='#000000'? `style="color:${r.color}"`:''; return `<label class="role-list role" title="${escapeHtml(r.name)}"><input type="checkbox" value="${r.id}" ${checked} ${dis}/> <i class="fas fa-tag" ${color}></i> <span>${escapeHtml(r.name)}</span></label>`; }).join(''); els.roles.querySelectorAll('input[type="checkbox"]').forEach(chk=> chk.addEventListener('change', ()=>{ const id=chk.value; if(chk.checked) selectedRoles.add(id); else selectedRoles.delete(id); debounceApply(); })); }
	let applyTimer=null; function debounceApply(){ if(applyTimer) clearTimeout(applyTimer); applyTimer=setTimeout(apply, 400); }
	async function openMember(id){ selectedMember = members.find(m=>m.id===id); if(!selectedMember) return; selectedRoles = new Set(selectedMember.roles||[]); renderRolesList(); notify(`A editar cargos de ${selectedMember.username}`,'info'); }
	async function apply(){ if(!selectedMember) return; const current=new Set(selectedMember.roles||[]); const toAdd=[...selectedRoles].filter(id=>!current.has(id)); const toRemove=[...current].filter(id=>!selectedRoles.has(id)); if(!toAdd.length && !toRemove.length) return; try{ const r=await fetch(`/api/guild/${guildId}/members/${selectedMember.id}/roles`,{method:'POST', headers:{'Content-Type':'application/json'}, credentials:'same-origin', body:JSON.stringify({ add: toAdd, remove: toRemove })}); const d=await r.json(); if(!r.ok||!d.success) throw new Error(d.error||`HTTP ${r.status}`); notify('Cargos atualizados','success'); // refresh member roles locally
 selectedMember.roles=[...selectedRoles]; renderMembers(); }catch(e){ console.error(e); notify(e.message,'error'); }
	}
	els.roleFilter?.addEventListener('change', ()=>loadMembers(false)); els.search?.addEventListener('input', ()=>loadMembers(false)); els.refresh?.addEventListener('click', ()=>loadMembers(true));
	els.selectAll?.addEventListener('click', ()=>{ multiSel = new Set(members.map(m=>m.id)); renderMembers(); });
	els.clearSel?.addEventListener('click', ()=>{ multiSel = new Set(); renderMembers(); });
	async function bulkUpdate(kind){ const rid=(els.bulkRole?.value||'').trim(); if(!rid) return notify('Escolha um cargo','error'); const ids=[...multiSel]; if(ids.length===0) return notify('Selecione membros','error'); const total=ids.length; let done=0, ok=0, fail=0; const results=[]; const updateProgress=()=>{ if(els.bulkProgress) els.bulkProgress.textContent = `Progresso: ${done}/${total} (${ok} ok, ${fail} falhas)`; }; const renderResults=()=>{ if(!els.bulkResults) return; els.bulkResults.innerHTML = results.map(r=>{ const m = members.find(x=>x.id===r.id) || { username:r.id, discriminator:'' }; const cls = r.ok? 'ok':'fail'; const icon = r.ok? 'fa-check-circle':'fa-times-circle'; const msg = r.ok? (kind==='add'? 'Adicionado' : 'Removido') : (r.error||'Falhou'); return `<div class="result-row ${cls}"><i class="fas ${icon}"></i> <strong>${escapeHtml(m.username)}</strong> <span class="text-secondary">#${escapeHtml(m.discriminator||'')}</span> — <span>${escapeHtml(msg)}</span></div>`; }).join(''); };
		if(els.bulkPanel){ const onlyOnFail = !!(els.openOnFailOnly && els.openOnFailOnly.checked); els.bulkPanel.open = !onlyOnFail; }
		if(els.bulkResults){ els.bulkResults.innerHTML=''; }
		if(els.clearBulkResults){ els.clearBulkResults.onclick = ()=>{ results.length = 0; if(els.bulkResults) els.bulkResults.innerHTML=''; if(els.bulkPanel) els.bulkPanel.open = false; if(els.bulkProgress) els.bulkProgress.textContent = ''; } }
		if(els.copyBulkSummary){ els.copyBulkSummary.onclick = async()=>{ const lines = results.map(r=>{ const m = members.find(x=>x.id===r.id) || { username:r.id, discriminator:'' }; const status = r.ok? 'OK':'FAIL'; const action = kind==='add'? 'ADD':'REMOVE'; return `${status}\t${action}\t${m.username}#${m.discriminator||''}\t(${r.id})${r.ok?'':`\t${r.error||''}`}`; }).join('\n'); try{ await navigator.clipboard.writeText(lines); notify('Resumo copiado','success'); }catch{ notify('Não foi possível copiar','error'); } }; }
		updateProgress();
		const limit=4; const queue=ids.slice();
		const runOne=async(uid)=>{ try{ const body = kind==='add'? { add:[rid] } : { remove:[rid] }; const r=await fetch(`/api/guild/${guildId}/members/${uid}/roles`,{method:'POST', headers:{'Content-Type':'application/json'}, credentials:'same-origin', body:JSON.stringify(body)}); const d=await r.json(); if(!r.ok||!d.success) throw new Error(d.error||`HTTP ${r.status}`); ok++; results.push({ id: uid, ok: true }); }catch(e){ console.error('Bulk role error for', uid, e); fail++; results.push({ id: uid, ok: false, error: (e && e.message) ? e.message : 'erro' }); } finally{ done++; updateProgress(); renderResults(); } };
		const workers = Array.from({length: Math.min(limit, queue.length)}, async()=>{ while(queue.length){ const uid=queue.shift(); await runOne(uid); } }); await Promise.all(workers);
		// After all, if we only open on failures and there were any, open it now
		if(els.bulkPanel){ const onlyOnFail = !!(els.openOnFailOnly && els.openOnFailOnly.checked); if(onlyOnFail && fail>0){ els.bulkPanel.open = true; } }
		if(els.bulkProgress) els.bulkProgress.textContent = `Concluído: ${ok} sucesso(s), ${fail} falha(s)`; notify(kind==='add'?`Cargo adicionado a ${ok}`:`Cargo removido de ${ok}`,'success'); if(fail>0) notify(`${fail} falha(s) durante a operação`,'error'); await loadMembers(false); }
	els.bulkAdd?.addEventListener('click', ()=>bulkUpdate('add'));
	els.bulkRemove?.addEventListener('click', ()=>bulkUpdate('remove'));
	Promise.resolve().then(loadRoles).then(()=>loadMembers(true)).catch(e=>{ console.error(e); notify(e.message,'error'); });
})();