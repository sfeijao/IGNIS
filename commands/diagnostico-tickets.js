const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const TicketPermissionManager = require('../utils/TicketPermissionManager');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('diagnostico-tickets')
        .setDescription('Mostra informa√ß√µes de diagn√≥stico do sistema de tickets')
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageGuild),

    async execute(interaction) {
        await interaction.deferReply({ ephemeral: true });

        try {
            const permissionManager = new TicketPermissionManager();
            
            // Auto-detectar cargos
            const detectedRoles = permissionManager.autoDetectStaffRoles(interaction.guild);
            const suggestions = await permissionManager.suggestStaffRoles(interaction.guild);
            const config = permissionManager.getConfig();

            // Criar embed de diagn√≥stico
            const embed = new EmbedBuilder()
                .setTitle('üîç Diagn√≥stico do Sistema de Tickets')
                .setDescription('Informa√ß√µes sobre detec√ß√£o autom√°tica de cargos de staff')
                .setColor(0x00ff00)
                .setTimestamp();

            // Cargos detectados por permiss√µes
            const permissionRoles = detectedRoles.filter(r => r.reason === 'permissions');
            if (permissionRoles.length > 0) {
                embed.addFields({
                    name: 'üõ°Ô∏è Cargos Detectados por Permiss√µes',
                    value: permissionRoles.map(role => 
                        `‚Ä¢ **${role.name}** (${role.id})\n  Permiss√µes: ${role.permissions.join(', ')}`
                    ).join('\n') || 'Nenhum',
                    inline: false
                });
            }

            // Cargos detectados por nome
            const nameRoles = detectedRoles.filter(r => r.reason === 'name');
            if (nameRoles.length > 0) {
                embed.addFields({
                    name: 'üìù Cargos Detectados por Nome',
                    value: nameRoles.map(role => 
                        `‚Ä¢ **${role.name}** (${role.id})\n  Padr√£o: ${role.matchedPattern}`
                    ).join('\n') || 'Nenhum',
                    inline: false
                });
            }

            // Cargos j√° configurados
            if (suggestions.alreadyConfigured.length > 0) {
                embed.addFields({
                    name: '‚úÖ Cargos J√° Configurados',
                    value: suggestions.alreadyConfigured.map(role => 
                        `‚Ä¢ **${role.name}** (${role.id})`
                    ).join('\n'),
                    inline: false
                });
            }

            // Sugest√µes de novos cargos
            if (suggestions.suggestions.length > 0) {
                embed.addFields({
                    name: 'üí° Sugest√µes de Configura√ß√£o',
                    value: suggestions.suggestions.map(role => 
                        `‚Ä¢ **${role.name}** (${role.id}) - ${role.reason}`
                    ).join('\n'),
                    inline: false
                });
            }

            // Estat√≠sticas
            embed.addFields({
                name: 'üìä Estat√≠sticas',
                value: [
                    `‚Ä¢ **Total detectado:** ${detectedRoles.length}`,
                    `‚Ä¢ **Por permiss√µes:** ${permissionRoles.length}`,
                    `‚Ä¢ **Por nome:** ${nameRoles.length}`,
                    `‚Ä¢ **J√° configurados:** ${suggestions.alreadyConfigured.length}`,
                    `‚Ä¢ **Sugest√µes:** ${suggestions.suggestions.length}`
                ].join('\n'),
                inline: false
            });

            // Configura√ß√£o atual
            const currentConfig = [
                `‚Ä¢ **Rate Limiting:** ${config.rateLimiting.enabled ? 'Ativo' : 'Inativo'}`,
                `‚Ä¢ **Max por hora:** ${config.rateLimiting.maxTicketsPerHour}`,
                `‚Ä¢ **Max por dia:** ${config.rateLimiting.maxTicketsPerDay}`,
                `‚Ä¢ **Cooldown:** ${config.rateLimiting.cooldownMinutes} min`,
                `‚Ä¢ **Categorias:** ${Object.keys(config.categories).length}`
            ].join('\n');

            embed.addFields({
                name: '‚öôÔ∏è Configura√ß√£o Atual',
                value: currentConfig,
                inline: false
            });

            // Bot√µes de a√ß√£o
            const actionText = suggestions.suggestions.length > 0 
                ? '\n\nüí° **A√ß√£o Recomendada:** Execute `/auto-configurar-tickets` para aplicar automaticamente os cargos detectados.'
                : '\n\n‚úÖ **Status:** Todos os cargos de staff detectados j√° est√£o configurados.';

            embed.setFooter({ 
                text: 'Sistema de Auto-detec√ß√£o de Cargos' + actionText
            });

            await interaction.editReply({ embeds: [embed] });

        } catch (error) {
            console.error('Erro no diagn√≥stico de tickets:', error);
            await interaction.editReply({
                content: '‚ùå Erro ao executar diagn√≥stico. Contacta um administrador.'
            });
        }
    }
};